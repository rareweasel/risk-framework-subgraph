
type EthTx @entity {
  " Transaction hash + Log Index "
  id: ID!
  " Log index related to the event. A Transaction might contain multiple events "
  logIndex: BigInt!
  " The transaction sender "
  from: Bytes!
  " Gas price used in the transaction "
  gasPrice: BigInt!
  " Gas limit used in the transaction "
  gasLimit: BigInt!
  " Transaction hash "
  hash: Bytes!
  " The transaction index "
  index: BigInt!
  " Address that received the transaction "
  to: Bytes!
  " Ether value sent in the transaction "
  value: BigInt!
  " Timestamp when the transaction was executed "
  timestamp: BigInt!
  " Gas limit used in the current block "
  blockGasLimit: BigInt!
  " Block number "
  blockNumber: BigInt!
}

type Target @entity {
  " Target + Network Id. "
  id: ID!
  " The target address (vault/strategy). It might be a v2 or v3 strategy/vault. "
  address: Bytes!
  " The target URL based on the network id. "
  targetUrl: String!
  " The network id where the target is deployed. "
  networkId: BigInt!
  " Latest score set for the target. "
  score: Score
  " Identifies whether this target is still active or not. A non-active target means that it is not being used in the protocol anymore. "
  isActive: Boolean
  " Target reference where the current target was copied from. If the target was not copied, this field is null. "
  copiedFrom: Target
  " List of scores set for the target. "
  scoresHistory: [ScoreUpdate!]! @derivedFrom(field: "target")
  " List of tags set for the target. "
  tags: [Tag!]! @derivedFrom(field: "target")
  " List of tags set in the past for the target. "
  tagsHistory: [TagUpdate!]! @derivedFrom(field: "target")
  " Timestamp when the target was created. "
  timestamp: BigInt!
  " Block number where the target was created. "
  blockNumber: BigInt!
  " The transaction where the target was created. "
  createdAt: EthTx!
  " The transaction where the isActive value was updated. "
  isActiveUpdatedAt: EthTx!
  " The transaction where the copiedFrom value was updated. "
  copiedFromAt: EthTx
}

type Score @entity {
  " Tx Hash + Log Index "
  id: ID!
  " The score value in a packed format "
  score: BigInt!
  " The score values in a human readable format. This field is in string format since contains multiple scores. "
  scores: String!
  " The average score value in a human readable format. The value is multiplied by 1000 to avoid precision losses. "
  averageScore: BigInt!
  " The target reference. It might be a v2 or v3 target. "
  target: Target!
  " Timestamp when the transaction was executed. "
  timestamp: BigInt!
  " Block number where the score was set. "
  blockNumber: BigInt!
  " The transaction where the score was set. "
  createdAt: EthTx!
}

type ScoreUpdate @entity {
  " Tx Hash + Log Index "
  id: ID!
  " The score value in a packed format. "
  score: BigInt!
  " The score values in a human readable format. This field is in string format since contains multiple scores. "
  scores: String!
  " The average score value in a human readable format. The value is multiplied by 1000 to avoid precision losses. "
  averageScore: BigInt!
  " The target reference. It might be a v2 or v3 target. "
  target: Target!
  " Timestamp when the transaction was executed. "
  timestamp: BigInt!
  " Block number where the score was set. "
  blockNumber: BigInt!
  " The transaction where the score was set. "
  createdAt: EthTx!
}

type Tag @entity {
  " Target + Tag. "
  id: ID!
  " The target references. "
  target: Target!
  " The tag in string format. "
  value: String!
  " Identifies whether this tag for the target has been removed. "
  removed: Boolean!
  " Timestamp when the transaction was executed. "
  timestamp: BigInt!
  " Block number where the tag was set. "
  blockNumber: BigInt!
  " The transaction where the tag was created. "
  createdAt: EthTx!
}

type TagUpdate @entity {
  " Target + Tag. "
  id: ID!
  " The target references. "
  target: Target!
  " The tag in string format. "
  value: String!
  " Identifies whether this tag for the target has been removed. "
  removed: Boolean!
  " Timestamp when the transaction was executed. "
  timestamp: BigInt!
  " Block number where the tag was set. "
  blockNumber: BigInt!
  " The transaction where the tag was created or removed. "
  txAt: EthTx!
}

type LpV2VaultFactory @entity {
  " Factory address. "
  id: ID!
  " The factory address. "
  factory: Bytes!
  " The list of vaults created by this factory. "
  vaults: [LpV2Vault!]! @derivedFrom(field: "factory")
  " Timestamp when the transaction was executed. "
  timestamp: BigInt!
  " Block number where the factory was created. "
  blockNumber: BigInt!
  " The transaction where the factory was created. "
  createdAt: EthTx!
}

type LpV2Vault @entity {
  " Vault Address. "
  id: ID!
  " The vault address. "
  vault: Bytes!
  " The Curve gauge address. "
  gauge: Bytes!
  " The LP token address. "
  lpToken: Bytes!
  " The factory address that created this vault. "
  factory: LpV2VaultFactory!
  " The list of strategies associated to this vault. "
  strategies: [LpV2Strategy!]! @derivedFrom(field: "vault")
  " Timestamp when the transaction was executed. "
  timestamp: BigInt!
  " Block number where the tag was set. "
  blockNumber: BigInt!
  " The transaction where the vault was created. "
  createdAt: EthTx!
}

type LpV2Strategy @entity {
  " Strategy Address. "
  id: ID!
  " The strategy address. "
  strategy: Bytes!
  " The reference to the vault. "
  vault: LpV2Vault!
  " True if this strategy is tracked on the Risk Framework. Otherwise, it is false. This is updated when a score is set. "
  isOnRiskFramework: Boolean!
  " Timestamp when the transaction was executed. "
  timestamp: BigInt!
  " Block number where the strategy was created. "
  blockNumber: BigInt!
  " The transaction where the strategy was set on the risk framework. "
  setOnRiskFrameworkAt: EthTx
  " The transaction where the strategy was created. "
  createdAt: EthTx!
}